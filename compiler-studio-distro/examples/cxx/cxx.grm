    
grammar Cxx;

lexer Cxx;

// Precedences

nonassoc SHIFT_THERE;
nonassoc SCOPE, ELSE, INC, DEC, PLUS, MINUS, STAR, AMP,
	LBRT, LBRC, LT_OP, COLO, STRING_LITERAL;
nonassoc REDUCE_HERE_MOSTLY;
nonassoc LPAR;

start translation_unit;

identifier_word ::= Identifier;
identifier ::= identifier_word %prec SHIFT_THERE;

id ::= identifier %prec SHIFT_THERE -> Name(value);
id ::= identifier template_test '+' template_argument_list:l '>' -> TemplateName(name, arguments);
id ::= identifier template_test '+' '>'; // {: RESULT = i; ERRMSG("Empty template-argument-list"); :};
id ::= identifier template_test '-' -> Name(name);
id ::= template_id;
		
template_test ::= '<'; // -> template_test();

global_scope ::= SCOPE; //					{: RESULT = IS_DEFAULT; :};
global_scope ::= TEMPLATE global_scope; //	{: RESULT = IS_TEMPLATE; };

id_scope ::= id SCOPE -> NestedScope(id);

nested_id ::= id:i %prec SHIFT_THERE;
nested_id ::= id_scope nested_id -> NestedId(a, b);

scoped_id ::= nested_id;
scoped_id ::= global_scope nested_id -> GlobalId(a, b);

destructor_id ::= '~' id -> DestructorId(id);
destructor_id ::= TEMPLATE destructor_id -> SetTemplateId(id);

special_function_id ::= conversion_function_id;
special_function_id ::= operator_function_id;
special_function_id ::= TEMPLATE special_function_id -> SetTemplateId(id);

nested_special_function_id ::= special_function_id;
nested_special_function_id ::= id_scope destructor_id -> NestedId(a, b);
nested_special_function_id ::= id_scope nested_special_function_id -> NestedId(a, b);

scoped_special_function_id ::= nested_special_function_id;
scoped_special_function_id ::= global_scope nested_special_function_id -> GlobalId(a, b);

declarator_id ::= scoped_id;
declarator_id ::= scoped_special_function_id;
declarator_id ::= destructor_id;

built_in_type_id ::= built_in_type_specifier;
built_in_type_id ::= built_in_type_id built_in_type_specifier -> BuildInIds(a, b);

pseudo_destructor_id ::= built_in_type_id SCOPE '~' built_in_type_id -> PseudoDestructorId(a, b);
pseudo_destructor_id ::= '~' built_in_type_id -> PseudoDestructorId(b);
pseudo_destructor_id ::= TEMPLATE pseudo_destructor_id -> SetTemplateId(id);

nested_pseudo_destructor_id ::= pseudo_destructor_id;
nested_pseudo_destructor_id ::= id_scope nested_pseudo_destructor_id -> NestedId(a, b);

scoped_pseudo_destructor_id ::= nested_pseudo_destructor_id;
scoped_pseudo_destructor_id ::= global_scope scoped_pseudo_destructor_id -> GlobalIb(a, b);

string ::= STRING_LITERAL;
literal ::= INTEGER_LITERAL    -> IntegerLiteralExpression(a);
literal ::= CHARACTER_LITERAL  -> CharacterLiteralExpression(a);
literal ::= FLOATING_LITERAL   -> FloatingLiteralExpression(a);
literal ::= string             -> StringLiteralExpression(a);
literal ::= boolean_literal;

boolean_literal ::= FALSE	-> FalseExpression();
boolean_literal ::= TRUE	-> TrueExpression();

translation_unit ::= declaration_seq.opt -> TranslationUnit(a);

primary_expression ::= literal;
primary_expression ::= THIS -> ThisExpression();
primary_expression ::= suffix_decl_specified_ids;
primary_expression ::= abstract_expression %prec REDUCE_HERE_MOSTLY;

abstract_expression ::= parenthesis_clause          -> AbstractFunctionExpression(a);
abstract_expression ::= '[' expression.opt ']'      -> AbstractArrayExpression(a);
abstract_expression ::= TEMPLATE parenthesis_clause	-> SetTemplateExpression(AbstractFunctionExpression(a));

type1_parameters ::= parameter_declaration_list ';' -> Type1Parameters(a=0, b);
type1_parameters ::= type1_parameters parameter_declaration_list ';' -> Type1Parameters(a, b);

mark_type1 ::= /* empty */ {: RESULT = mark_type1(); :};

postfix_expression ::= primary_expression:a {: RESULT = a; :};
postfix_expression ::= postfix_expression:a parenthesis_clause:b mark_type1 '-' {: RESULT = YACC_CALL_EXPRESSION(a, b); :};
postfix_expression ::= postfix_expression:a parenthesis_clause:b mark_type1:c '+' type1_parameters:d mark:e '{' error 
		{: yyerrok(); remark_type1(e); unmark(); unmark(d); $$ = YACC_TYPE1_EXPRESSION(a, b, d); :};
postfix_expression ::= postfix_expression:a parenthesis_clause:b mark_type1:c '+' type1_parameters mark error 
		{: yyerrok(); remark_type1(c); unmark(); unmark(); RESULT = YACC_CALL_EXPRESSION(a, b); :};
postfix_expression ::= postfix_expression:a parenthesis_clause:b mark_type1:c '+' error
		{: yyerrok(); remark_type1(c); unmark(); RESULT = YACC_CALL_EXPRESSION(a, b); :};
postfix_expression ::= postfix_expression:a '[' expression.opt:b ']'             {: RESULT = YACC_ARRAY_EXPRESSION(a, b); :};
postfix_expression ::= postfix_expression:a '.' declarator_id:b                  {: RESULT = YACC_DOT_EXPRESSION(a, b); :};
postfix_expression ::= postfix_expression:a '.' scoped_pseudo_destructor_id:b    {: RESULT = YACC_DOT_EXPRESSION(a, b); :};
postfix_expression ::= postfix_expression:a ARROW declarator_id:b                {: RESULT = YACC_ARROW_EXPRESSION(a, b); :};
postfix_expression ::= postfix_expression:a ARROW scoped_pseudo_destructor_id:b  {: RESULT = YACC_ARROW_EXPRESSION(a, b); :};
postfix_expression ::= postfix_expression:a INC                                  {: RESULT = YACC_POST_INCREMENT_EXPRESSION(a); :};
postfix_expression ::= postfix_expression:a DEC                                  {: RESULT = YACC_POST_DECREMENT_EXPRESSION(a); :};
postfix_expression ::= DYNAMIC_CAST '<' type_id:a '>' '(' expression:b ')'       {: RESULT = YACC_DYNAMIC_CAST_EXPRESSION(a, b); :};
postfix_expression ::= STATIC_CAST '<' type_id:a '>' '(' expression:b ')'        {: RESULT = YACC_STATIC_CAST_EXPRESSION(a, b); :};
postfix_expression ::= REINTERPRET_CAST '<' type_id:a '>' '(' expression:b ')'   {: RESULT = YACC_REINTERPRET_CAST_EXPRESSION(a, b); :};
postfix_expression ::= CONST_CAST '<' type_id:a '>' '(' expression:b ')'         {: RESULT = YACC_CONST_CAST_EXPRESSION(a, b); :};
postfix_expression ::= TYPEID parameters_clause:a                                {: RESULT = YACC_TYPEID_EXPRESSION(a); :};

expression_list.opt ::= /* empty */			{: RESULT = YACC_EXPRESSIONS(0, 0); :};
expression_list.opt ::= expression_list:a	{: RESULT = a; :};

expression_list ::= assignment_expression:a							{: RESULT = YACC_EXPRESSIONS(0, a); :};
expression_list ::= expression_list:a ',' assignment_expression:b	{: RESULT = YACC_EXPRESSIONS(a, b); :};

unary_expression ::= postfix_expression:a {: RESULT = a; :};
unary_expression ::= INC cast_expression:a                                   { RESULT = YACC_PRE_INCREMENT_EXPRESSION(a); };
unary_expression ::= DEC cast_expression:a                                   { RESULT = YACC_PRE_DECREMENT_EXPRESSION(a); };
unary_expression ::= ptr_operator:a cast_expression:b                        { RESULT = YACC_POINTER_EXPRESSION(a, b); };
unary_expression ::= suffix_decl_specified_scope:a star_ptr_operator:b cast_expression:c { RESULT = YACC_SCOPED_POINTER_EXPRESSION(a, b, c); };
unary_expression ::= '+' cast_expression:a                                   { RESULT = YACC_PLUS_EXPRESSION(a); };
unary_expression ::= '-' cast_expression:a                                   { RESULT = YACC_MINUS_EXPRESSION(a); };
unary_expression ::= '!' cast_expression:a                                   { RESULT = YACC_NOT_EXPRESSION(a); };
unary_expression ::= '~' cast_expression:a                                   { RESULT = YACC_COMPLEMENT_EXPRESSION(a); };
unary_expression ::= SIZEOF unary_expression:a                               { RESULT = YACC_SIZEOF_EXPRESSION(a); };
unary_expression ::= new_expression:a                                        { RESULT = a; };
unary_expression ::= global_scope:a new_expression:a                         { RESULT = YACC_GLOBAL_EXPRESSION(a, b); };
unary_expression ::= delete_expression:a                                     { RESULT = a; };
unary_expression ::= global_scope:a delete_expression:b                      { RESULT = YACC_GLOBAL_EXPRESSION(a, b); };

delete_expression ::= DELETE cast_expression:a {: RESULT = YACC_DELETE_EXPRESSION(a); :};

new_expression:                     NEW new_type_id new_initializer.opt                     { $$ = YACC_NEW_TYPE_ID_EXPRESSION(0, $2, $3); }
    |                               NEW parameters_clause new_type_id new_initializer.opt   { $$ = YACC_NEW_TYPE_ID_EXPRESSION($2, $3, $4); }
    |                               NEW parameters_clause                                   { $$ = YACC_NEW_EXPRESSION($2, 0, 0); }
    |                               NEW parameters_clause parameters_clause new_initializer.opt { $$ = YACC_NEW_EXPRESSION($2, $3, $4); }

new_type_id:                        type_specifier ptr_operator_seq.opt                     { $$ = YACC_TYPED_EXPRESSION($1, $2); }
    |                               type_specifier new_declarator                           { $$ = YACC_TYPED_EXPRESSION($1, $2); }
    |                               type_specifier new_type_id                              { $$ = YACC_TYPED_EXPRESSION($1, $2); }

new_declarator:                     ptr_operator new_declarator                             { $$ = YACC_POINTER_EXPRESSION($1, $2); }
    |                               direct_new_declarator

direct_new_declarator:              '[' expression ']'                                      { $$ = YACC_ABSTRACT_ARRAY_EXPRESSION($2); }
    |                               direct_new_declarator '[' constant_expression ']'       { $$ = YACC_ARRAY_EXPRESSION($1, $3); }

new_initializer.opt:                /* empty */                                             { $$ = YACC_EXPRESSIONS(0, 0); }
    |                               '(' expression_list.opt ')'                             { $$ = $2; }

cast_expression:                    unary_expression
    |                               abstract_expression cast_expression                         { $$ = YACC_CAST_EXPRESSION($1, $2); }

pm_expression:                      cast_expression
    |                               pm_expression DOT_STAR cast_expression                      { $$ = YACC_DOT_STAR_EXPRESSION($1, $3); }
    |                               pm_expression ARROW_STAR cast_expression                    { $$ = YACC_ARROW_STAR_EXPRESSION($1, $3); }

multiplicative_expression:          pm_expression
    |                               multiplicative_expression star_ptr_operator pm_expression   { $$ = YACC_MULTIPLY_EXPRESSION($1, $2, $3); }
    |                               multiplicative_expression '/' pm_expression                 { $$ = YACC_DIVIDE_EXPRESSION($1, $3); }
    |                               multiplicative_expression '%' pm_expression                 { $$ = YACC_MODULUS_EXPRESSION($1, $3); }

additive_expression:                multiplicative_expression
    |                               additive_expression '+' multiplicative_expression           { $$ = YACC_ADD_EXPRESSION($1, $3); }
    |                               additive_expression '-' multiplicative_expression           { $$ = YACC_SUBTRACT_EXPRESSION($1, $3); }

shift_expression:                   additive_expression
    |                               shift_expression SHL additive_expression                    { $$ = YACC_SHIFT_LEFT_EXPRESSION($1, $3); }
    |                               shift_expression SHR additive_expression                    { $$ = YACC_SHIFT_RIGHT_EXPRESSION($1, $3); }

relational_expression:              shift_expression
    |                               relational_expression '<' shift_expression                  { $$ = YACC_LESS_THAN_EXPRESSION($1, $3); }
    |                               relational_expression '>' shift_expression                  { $$ = YACC_GREATER_THAN_EXPRESSION($1, $3); }
    |                               relational_expression LE shift_expression                   { $$ = YACC_LESS_EQUAL_EXPRESSION($1, $3); }
    |                               relational_expression GE shift_expression                   { $$ = YACC_GREATER_EQUAL_EXPRESSION($1, $3); }

equality_expression:                relational_expression
    |                               equality_expression EQ relational_expression                { $$ = YACC_EQUAL_EXPRESSION($1, $3); }
    |                               equality_expression NE relational_expression                { $$ = YACC_NOT_EQUAL_EXPRESSION($1, $3); }

and_expression:                     equality_expression
    |                               and_expression '&' equality_expression                      { $$ = YACC_AND_EXPRESSION($1, $3); }

exclusive_or_expression:            and_expression
    |                               exclusive_or_expression '^' and_expression                  { $$ = YACC_EXCLUSIVE_OR_EXPRESSION($1, $3); }

inclusive_or_expression:            exclusive_or_expression
    |                               inclusive_or_expression '|' exclusive_or_expression         { $$ = YACC_INCLUSIVE_OR_EXPRESSION($1, $3); }

logical_and_expression:             inclusive_or_expression
    |                               logical_and_expression LOG_AND inclusive_or_expression      { $$ = YACC_LOGICAL_AND_EXPRESSION($1, $3); }

logical_or_expression:              logical_and_expression
    |                               logical_or_expression LOG_OR logical_and_expression         { $$ = YACC_LOGICAL_OR_EXPRESSION($1, $3); }

conditional_expression:             logical_or_expression
    |                               logical_or_expression '?' expression ':' assignment_expression
                                                                                                { $$ = YACC_CONDITIONAL_EXPRESSION($1, $3, $5); }
assignment_expression:              conditional_expression
    |                               logical_or_expression assignment_operator assignment_expression { $$ = YACC_ASSIGNMENT_EXPRESSION($1, $2, $3); }
    |                               logical_or_expression '=' braced_initializer                    { $$ = YACC_ASSIGNMENT_EXPRESSION($1, $2, $3); }
    |                               throw_expression

assignment_operator:                '=' | ASS_ADD | ASS_AND | ASS_DIV | ASS_MOD | ASS_MUL | ASS_OR | ASS_SHL | ASS_SHR | ASS_SUB | ASS_XOR

expression.opt:                     /* empty */                                                 { $$ = YACC_EXPRESSION(0); }
    |                               expression

expression:                         assignment_expression
    |                               expression_list ',' assignment_expression                   { $$ = YACC_EXPRESSION(YACC_EXPRESSIONS($1, $3)); }

constant_expression:                conditional_expression

templated_relational_expression:    shift_expression
    |                               templated_relational_expression '<' shift_expression        { $$ = YACC_LESS_THAN_EXPRESSION($1, $3); }
    |                               templated_relational_expression LE shift_expression         { $$ = YACC_LESS_EQUAL_EXPRESSION($1, $3); }
    |                               templated_relational_expression GE shift_expression         { $$ = YACC_GREATER_EQUAL_EXPRESSION($1, $3); }

templated_equality_expression:      templated_relational_expression
    |                               templated_equality_expression EQ templated_relational_expression    { $$ = YACC_EQUAL_EXPRESSION($1, $3); }
    |                               templated_equality_expression NE templated_relational_expression    { $$ = YACC_NOT_EQUAL_EXPRESSION($1, $3); }

templated_and_expression:           templated_equality_expression
    |                               templated_and_expression '&' templated_equality_expression  { $$ = YACC_AND_EXPRESSION($1, $3); }

templated_exclusive_or_expression:  templated_and_expression
    |                               templated_exclusive_or_expression '^' templated_and_expression
                                                                                                { $$ = YACC_EXCLUSIVE_OR_EXPRESSION($1, $3); }
templated_inclusive_or_expression:  templated_exclusive_or_expression
    |                               templated_inclusive_or_expression '|' templated_exclusive_or_expression
                                                                                                { $$ = YACC_INCLUSIVE_OR_EXPRESSION($1, $3); }
templated_logical_and_expression:   templated_inclusive_or_expression
    |                               templated_logical_and_expression LOG_AND templated_inclusive_or_expression
                                                                                                { $$ = YACC_LOGICAL_AND_EXPRESSION($1, $3); }
templated_logical_or_expression:    templated_logical_and_expression
    |                               templated_logical_or_expression LOG_OR templated_logical_and_expression
                                                                                                { $$ = YACC_LOGICAL_OR_EXPRESSION($1, $3); }
templated_conditional_expression:   templated_logical_or_expression
    |                               templated_logical_or_expression '?' templated_expression ':' templated_assignment_expression
                                                                                                { $$ = YACC_CONDITIONAL_EXPRESSION($1, $3, $5); }
templated_assignment_expression:    templated_conditional_expression
    |                               templated_logical_or_expression assignment_operator templated_assignment_expression
                                                                                                { $$ = YACC_ASSIGNMENT_EXPRESSION($1, $2, $3); }
    |                               templated_throw_expression
templated_expression:               templated_assignment_expression
    |                               templated_expression_list ',' templated_assignment_expression
                                                                                                { $$ = YACC_EXPRESSION(YACC_EXPRESSIONS($1, $3)); }
templated_expression_list:          templated_assignment_expression                             { $$ = YACC_EXPRESSIONS(0, $1); }
    |                               templated_expression_list ',' templated_assignment_expression    { $$ = YACC_EXPRESSIONS($1, $3); }

looping_statement:                  start_search looped_statement                               { $$ = YACC_LINED_STATEMENT($2, $1); end_search($$); }

looped_statement:                   statement
    |                               advance_search '+' looped_statement                         { $$ = $3; }
    |                               advance_search '-'                                          { $$ = 0; }

statement:                          control_statement
    |                               compound_statement
    |                               declaration_statement
    |                               try_block                                                   { $$ = YACC_TRY_BLOCK_STATEMENT($1); }

control_statement:                  labeled_statement
    |                               selection_statement
    |                               iteration_statement
    |                               jump_statement

labeled_statement:                  identifier_word ':' looping_statement                       { $$ = YACC_LABEL_STATEMENT($1, $3); }
    |                               CASE constant_expression ':' looping_statement              { $$ = YACC_CASE_STATEMENT($2, $4); }
    |                               DEFAULT ':' looping_statement                               { $$ = YACC_DEFAULT_STATEMENT($3); }

compound_statement:                 '{' statement_seq.opt '}'                                   { $$ = YACC_COMPOUND_STATEMENT($2); }
    |                               '{' statement_seq.opt looping_statement '#' bang error '}'  { $$ = $2; YACC_UNBANG($5, "Bad statement-seq."); }

statement_seq.opt:                  /* empty */                                                 { $$ = YACC_STATEMENTS(0, 0); }
    |                               statement_seq.opt looping_statement                         { $$ = YACC_STATEMENTS($1, YACC_COMPILE_STATEMENT($2)); }
    |                               statement_seq.opt looping_statement '#' bang error ';'      { $$ = $1; YACC_UNBANG($4, "Bad statement."); }

selection_statement:                IF '(' condition ')' looping_statement    %prec SHIFT_THERE { $$ = YACC_IF_STATEMENT($3, $5, 0); }
    |                               IF '(' condition ')' looping_statement ELSE looping_statement { $$ = YACC_IF_STATEMENT($3, $5, $7); }
    |                               SWITCH '(' condition ')' looping_statement                  { $$ = YACC_SWITCH_STATEMENT($3, $5); }
condition.opt:                      /* empty */                                                 { $$ = YACC_CONDITION(0); }
    |                               condition

condition:                          parameter_declaration_list                                  { $$ = YACC_CONDITION($1); }

iteration_statement:                WHILE '(' condition ')' looping_statement                   { $$ = YACC_WHILE_STATEMENT($3, $5); }
    |                               DO looping_statement WHILE '(' expression ')' ';'           { $$ = YACC_DO_WHILE_STATEMENT($2, $5); }
    |                               FOR '(' for_init_statement condition.opt ';' expression.opt ')' looping_statement
                                                                                                { $$ = YACC_FOR_STATEMENT($3, $4, $6, $8); }
for_init_statement:                 simple_declaration

jump_statement:                     BREAK ';'                                                   { $$ = YACC_BREAK_STATEMENT(); }
    |                               CONTINUE ';'                                                { $$ = YACC_CONTINUE_STATEMENT(); }
    |                               RETURN expression.opt ';'                                   { $$ = YACC_RETURN_STATEMENT($2); }
    |                               GOTO identifier ';'                                         { $$ = YACC_GOTO_STATEMENT($2); }
declaration_statement:              block_declaration                                           { $$ = YACC_DECLARATION_STATEMENT($1); }

compound_declaration:               '{' nest declaration_seq.opt '}'                            { $$ = $3; unnest($2); }
    |                               '{' nest declaration_seq.opt util looping_declaration '#' bang error '}'
                                                                                                { $$ = $3; unnest($2); YACC_UNBANG($7, "Bad declaration-seq."); }


declaration_seq.opt ::=                                              -> Declarations(a=0, b=0);
declaration_seq.opt ::= declaration_seq.opt util looping_declaration -> Decalrations(a1, CompileDeclaration(a2, a3)); }
declaration_seq.opt ::= declaration_seq.opt util looping_declaration '#' bang error ';' ; // { $$ = $1; YACC_UNBANG($5, "Bad declaration."); }

looping_declaration :::= start_search1 looped_declaration -> LinedDeclaration(a2, a1), end_search($$);

looped_declaration ::= declaration;
looped_declaration ::= advance_search '+' looped_declaration -> a3;
looped_declaration ::= advance_search '-' -> NULL;

declaration ::= block_declaration;
declaration ::= function_definition -> SimpleDeclaration(a);
declaration ::= template_declaration;
declaration ::= explicit_specialization;
declaration ::= specialised_declaration;

specialised_declaration ::= linkage_specification -> LinkageSpecification(a);
specialised_declaration ::= namespace_definition  -> NamespaceDeclaration(a);
specialised_declaration ::= TEMPLATE specialised_declaration -> SetTemplateDeclaration(a);

block_declaration ::= simple_declaration -> SimpleDeclaration(a);
block_declaration ::= specialised_block_declaration;

specialised_block_declaration ::= asm_definition;
specialised_block_declaration ::= namespace_alias_definition;
specialised_block_declaration ::= using_declaration;
specialised_block_declaration ::= using_directive;
specialised_block_declaration ::= TEMPLATE specialised_block_declaration -> SetTemplateDeclaration(a);

simple_declaration:                 ';'                                                         { $$ = YACC_EXPRESSION(0); }
    |                               init_declaration ';'
    |                               init_declarations ';'                                       { $$ = $1; }
    |                               decl_specifier_prefix simple_declaration                    { $$ = YACC_DECL_SPECIFIER_EXPRESSION($2, $1); }

suffix_built_in_decl_specifier.raw: built_in_type_specifier                                     { $$ = $1; }
    |                               suffix_built_in_decl_specifier.raw built_in_type_specifier  { $$ = YACC_BUILT_IN_NAME($1, $2); }
    |                               suffix_built_in_decl_specifier.raw decl_specifier_suffix    { $$ = YACC_DECL_SPECIFIER_NAME($1, $2); }

suffix_built_in_decl_specifier:     suffix_built_in_decl_specifier.raw                          { $$ = $1; }
    |                               TEMPLATE suffix_built_in_decl_specifier                     { $$ = YACC_SET_TEMPLATE_NAME($2); }

suffix_named_decl_specifier:        scoped_id                                                   { $$ = $1; }
    |                               elaborate_type_specifier                                    { $$ = $1; }
    |                               suffix_named_decl_specifier decl_specifier_suffix           { $$ = YACC_DECL_SPECIFIER_NAME($1, $2); }

suffix_named_decl_specifier.bi:     suffix_named_decl_specifier                                 { $$ = YACC_NAME_EXPRESSION($1); }
    |                               suffix_named_decl_specifier suffix_built_in_decl_specifier.raw  { $$ = YACC_TYPED_NAME($1, $2); }

suffix_named_decl_specifiers:       suffix_named_decl_specifier.bi
    |                               suffix_named_decl_specifiers suffix_named_decl_specifier.bi { $$ = YACC_TYPED_NAME($1, $2); }

suffix_named_decl_specifiers.sf:    scoped_special_function_id          /* operators etc */     { $$ = YACC_NAME_EXPRESSION($1); }
    |                               suffix_named_decl_specifiers
    |                               suffix_named_decl_specifiers scoped_special_function_id     { $$ = YACC_TYPED_NAME($1, $2); }

suffix_decl_specified_ids:          suffix_built_in_decl_specifier
    |                               suffix_built_in_decl_specifier suffix_named_decl_specifiers.sf { $$ = YACC_TYPED_NAME($1, $2); }
    |                               suffix_named_decl_specifiers.sf

suffix_decl_specified_scope:        suffix_named_decl_specifiers SCOPE
    |                               suffix_built_in_decl_specifier suffix_named_decl_specifiers SCOPE { $$ = YACC_TYPED_NAME($1, $2); }
    |                               suffix_built_in_decl_specifier SCOPE                        { $$ = YACC_NAME_EXPRESSION($1); }

decl_specifier_affix:               storage_class_specifier
    |                               function_specifier
    |                               FRIEND                                                          
    |                               TYPEDEF
    |                               cv_qualifier                                                { $$ = $1; }

decl_specifier_suffix:              decl_specifier_affix

decl_specifier_prefix:              decl_specifier_affix
    |                               TEMPLATE decl_specifier_prefix                              { $$ = YACC_SET_TEMPLATE_DECL_SPECIFIER($2); }

storage_class_specifier:            REGISTER | STATIC | MUTABLE
    |                               EXTERN                  %prec SHIFT_THERE                   /* Prefer linkage specification */
    |                               AUTO

function_specifier:                 EXPLICIT
    |                               INLINE
    |                               VIRTUAL

type_specifier:                     simple_type_specifier
    |                               elaborate_type_specifier
    |                               cv_qualifier                                                { $$ = YACC_CV_DECL_SPECIFIER($1); }

elaborate_type_specifier:           class_specifier
    |                               enum_specifier
    |                               elaborated_type_specifier
    |                               TEMPLATE elaborate_type_specifier                           { $$ = YACC_SET_TEMPLATE_ID($2); }
simple_type_specifier:              scoped_id
    |                               built_in_type_specifier                                     { $$ = YACC_BUILT_IN_ID_ID($1); }

built_in_type_specifier:            CHAR | WCHAR_T | BOOL | SHORT | INT | LONG | SIGNED | UNSIGNED | FLOAT | DOUBLE | VOID

elaborated_type_specifier:          elaborated_class_specifier
    |                               elaborated_enum_specifier
    |                               TYPENAME scoped_id                                          { $$ = YACC_ELABORATED_TYPE_SPECIFIER($1, $2); }

elaborated_enum_specifier:          ENUM scoped_id               %prec SHIFT_THERE              { $$ = YACC_ELABORATED_TYPE_SPECIFIER($1, $2); }

enum_specifier:                     ENUM scoped_id enumerator_clause                            { $$ = YACC_ENUM_SPECIFIER_ID($2, $3); }
    |                               ENUM enumerator_clause                                      { $$ = YACC_ENUM_SPECIFIER_ID(0, $2); }

enumerator_clause:                  '{' enumerator_list_ecarb                                   { $$ = YACC_ENUMERATORS(0, 0); }
    |                               '{' enumerator_list enumerator_list_ecarb                   { $$ = $2; }
    |                               '{' enumerator_list ',' enumerator_definition_ecarb         { $$ = $2; }

enumerator_list_ecarb:              '}'                                                         { }
    |                               bang error '}'                                              { YACC_UNBANG($1, "Bad enumerator-list."); }

enumerator_definition_ecarb:        '}'                                                         { }
    |                               bang error '}'                                              { YACC_UNBANG($1, "Bad enumerator-definition."); }

enumerator_definition_filler:       /* empty */
    |                               bang error ','                                              { YACC_UNBANG($1, "Bad enumerator-definition."); }

enumerator_list_head:               enumerator_definition_filler                                { $$ = YACC_ENUMERATORS(0, 0); }
    |                               enumerator_list ',' enumerator_definition_filler

enumerator_list:                    enumerator_list_head enumerator_definition                  { $$ = YACC_ENUMERATORS($1, $2); }

enumerator_definition:              enumerator                                                  { $$ = YACC_ENUMERATOR($1, 0); }
    |                               enumerator '=' constant_expression                          { $$ = YACC_ENUMERATOR($1, $3); }

enumerator:                         identifier

namespace_definition:               NAMESPACE scoped_id compound_declaration                    { $$ = YACC_NAMESPACE_DEFINITION($2, $3); }
    |                               NAMESPACE compound_declaration                              { $$ = YACC_NAMESPACE_DEFINITION(0, $2); }

namespace_alias_definition:         NAMESPACE scoped_id '=' scoped_id ';'                       { $$ = YACC_NAMESPACE_ALIAS_DEFINITION($2, $4); }

using_declaration:                  USING declarator_id ';'                                     { $$ = YACC_USING_DECLARATION(false, $2); }
    |                               USING TYPENAME declarator_id ';'                            { $$ = YACC_USING_DECLARATION(true, $3); }

using_directive:                    USING NAMESPACE scoped_id ';'                               { $$ = YACC_USING_DIRECTIVE($3); }

asm_definition:                     ASM '(' string ')' ';'                                      { $$ = YACC_ASM_DEFINITION($3); }

linkage_specification:              EXTERN string looping_declaration                           { $$ = YACC_LINKAGE_SPECIFIER($2, $3); }
    |                               EXTERN string compound_declaration                          { $$ = YACC_LINKAGE_SPECIFIER($2, $3); }

init_declarations:                  assignment_expression ',' init_declaration                  { $$ = YACC_EXPRESSIONS(YACC_EXPRESSIONS(0, $1), $3); }
    |                               init_declarations ',' init_declaration                      { $$ = YACC_EXPRESSIONS($1, $3); }
init_declaration:                   assignment_expression

star_ptr_operator:                  '*'                                                         { $$ = YACC_POINTER_DECLARATOR(); }
    |                               star_ptr_operator cv_qualifier                              { $$ = YACC_CV_DECLARATOR($1, $2); }

nested_ptr_operator:                star_ptr_operator                                           { $$ = $1; }
    |                               id_scope nested_ptr_operator                                { $$ = YACC_NESTED_DECLARATOR($1, $2); }

ptr_operator:                       '&'                                                         { $$ = YACC_REFERENCE_DECLARATOR(); }
    |                               nested_ptr_operator                                         { $$ = $1; }
    |                               global_scope nested_ptr_operator                            { $$ = YACC_GLOBAL_DECLARATOR($1, $2); }

ptr_operator_seq:                   ptr_operator                                                { $$ = YACC_POINTER_EXPRESSION($1, YACC_EPSILON()); }
    |                               ptr_operator ptr_operator_seq                               { $$ = YACC_POINTER_EXPRESSION($1, $2); }

ptr_operator_seq.opt:               /* empty */                         %prec SHIFT_THERE       /* Maximise type length */ { $$ = YACC_EXPRESSION(0); }
    |                               ptr_operator ptr_operator_seq.opt                           { $$ = YACC_POINTER_EXPRESSION($1, $2); }

cv_qualifier_seq.opt:               /* empty */                                                 { $$ = YACC_CV_QUALIFIERS(0, 0); }
    |                               cv_qualifier_seq.opt cv_qualifier                           { $$ = YACC_CV_QUALIFIERS($1, $2); }

cv_qualifier:                       CONST | VOLATILE /* | CvQualifier */

type_id:                            type_specifier abstract_declarator.opt                      { $$ = YACC_TYPED_EXPRESSION($1, $2); }
    |                               type_specifier type_id                                      { $$ = YACC_TYPED_EXPRESSION($1, $2); }

abstract_declarator.opt:            /* empty */                                                 { $$ = YACC_EPSILON(); }
    |                               ptr_operator abstract_declarator.opt                        { $$ = YACC_POINTER_EXPRESSION($1, $2); }
    |                               direct_abstract_declarator

direct_abstract_declarator.opt:     /* empty */                                                 { $$ = YACC_EPSILON(); }
    |                               direct_abstract_declarator

direct_abstract_declarator:         direct_abstract_declarator.opt parenthesis_clause           { $$ = YACC_CALL_EXPRESSION($1, $2); }
    |                               direct_abstract_declarator.opt '[' ']'                      { $$ = YACC_ARRAY_EXPRESSION($1, 0); }
    |                               direct_abstract_declarator.opt '[' constant_expression ']'  { $$ = YACC_ARRAY_EXPRESSION($1, $3); }

parenthesis_clause:                 parameters_clause cv_qualifier_seq.opt                      { $$ = YACC_PARENTHESISED($1, $2, 0); }
    |                               parameters_clause cv_qualifier_seq.opt exception_specification  { $$ = YACC_PARENTHESISED($1, $2, $3); }

parameters_clause:                  '(' parameter_declaration_clause ')'                        { $$ = $2; }

parameter_declaration_clause:       /* empty */                                                 { $$ = YACC_PARAMETERS(0, 0); }
    |                               parameter_declaration_list
    |                               parameter_declaration_list ELLIPSIS                         { $$ = YACC_PARAMETERS($1, YACC_ELLIPSIS_EXPRESSION()); }

parameter_declaration_list:         parameter_declaration                                       { $$ = YACC_PARAMETERS(0, $1); }
    |                               parameter_declaration_list ',' parameter_declaration        { $$ = YACC_PARAMETERS($1, $3); }

abstract_pointer_declaration:       ptr_operator_seq
    |                               multiplicative_expression star_ptr_operator ptr_operator_seq.opt { $$ = YACC_MULTIPLY_EXPRESSION($1, $2, $3); }

abstract_parameter_declaration:     abstract_pointer_declaration
    |                               and_expression '&'                                          { $$ = YACC_AND_EXPRESSION($1, YACC_EPSILON()); }
    |                               and_expression '&' abstract_pointer_declaration             { $$ = YACC_AND_EXPRESSION($1, $3); }

special_parameter_declaration:      abstract_parameter_declaration
    |                               abstract_parameter_declaration '=' assignment_expression    { $$ = YACC_ASSIGNMENT_EXPRESSION($1, $2, $3); }
    |                               ELLIPSIS                                                    { $$ = YACC_ELLIPSIS_EXPRESSION(); }

parameter_declaration:              assignment_expression                                       { $$ = YACC_EXPRESSION_PARAMETER($1); }
    |                               special_parameter_declaration                               { $$ = YACC_EXPRESSION_PARAMETER($1); }
    |                               decl_specifier_prefix parameter_declaration                 { $$ = YACC_DECL_SPECIFIER_PARAMETER($2, $1); }

templated_parameter_declaration:    templated_assignment_expression                             { $$ = YACC_EXPRESSION_PARAMETER($1); }
    |                               templated_abstract_declaration                              { $$ = YACC_EXPRESSION_PARAMETER($1); }
    |                               templated_abstract_declaration '=' templated_assignment_expression
                                                    { $$ = YACC_EXPRESSION_PARAMETER(YACC_ASSIGNMENT_EXPRESSION($1, $2, $3)); }
    |                               decl_specifier_prefix templated_parameter_declaration       { $$ = YACC_DECL_SPECIFIER_PARAMETER($2, $1); }

templated_abstract_declaration:     abstract_pointer_declaration
    |                               templated_and_expression '&'                                { $$ = YACC_AND_EXPRESSION($1, 0); }
    |                               templated_and_expression '&' abstract_pointer_declaration   { $$ = YACC_AND_EXPRESSION($1, $3); }

function_definition:        ctor_definition
    |                       func_definition

func_definition:            assignment_expression function_try_block                    { $$ = YACC_FUNCTION_DEFINITION($1, $2); }
    |                       assignment_expression function_body                         { $$ = YACC_FUNCTION_DEFINITION($1, $2); }
    |                       decl_specifier_prefix func_definition                       { $$ = YACC_DECL_SPECIFIER_EXPRESSION($2, $1); }

ctor_definition:            constructor_head function_try_block                         { $$ = YACC_CTOR_DEFINITION($1, $2); }
    |                       constructor_head function_body                              { $$ = YACC_CTOR_DEFINITION($1, $2); }
    |                       decl_specifier_prefix ctor_definition                       { $$ = YACC_DECL_SPECIFIER_EXPRESSION($2, $1); }

constructor_head:           bit_field_init_declaration                                  { $$ = YACC_EXPRESSIONS(0, $1); }
    |                       constructor_head ',' assignment_expression                  { $$ = YACC_EXPRESSIONS($1, $3); }

function_try_block:         TRY function_block handler_seq                              { $$ = YACC_TRY_FUNCTION_BLOCK($2, $3); }

function_block:             ctor_initializer.opt function_body                          { $$ = YACC_CTOR_FUNCTION_BLOCK($2, $1); }

function_body:              compound_statement                                          { $$ = YACC_FUNCTION_BLOCK($1); }

initializer_clause:         assignment_expression                                       { $$ = YACC_INITIALIZER_EXPRESSION_CLAUSE($1); }
    |                       braced_initializer

braced_initializer:         '{' initializer_list '}'                                    { $$ = YACC_INITIALIZER_LIST_CLAUSE($2); }
    |                       '{' initializer_list ',' '}'                                { $$ = YACC_INITIALIZER_LIST_CLAUSE($2); }
    |                       '{' '}'                                                     { $$ = YACC_INITIALIZER_LIST_CLAUSE(0); }
    |                       '{' looping_initializer_clause '#' bang error '}'           { $$ = 0; YACC_UNBANG($4, "Bad initializer_clause."); }
    |                       '{' initializer_list ',' looping_initializer_clause '#' bang error '}'
                                                                                        { $$ = $2; YACC_UNBANG($6, "Bad initializer_clause."); }
initializer_list:           looping_initializer_clause                                  { $$ = YACC_INITIALIZER_CLAUSES(0, $1); }
    |                       initializer_list ',' looping_initializer_clause             { $$ = YACC_INITIALIZER_CLAUSES($1, $3); }

looping_initializer_clause: start_search looped_initializer_clause                      { $$ = $2; end_search($$); }

looped_initializer_clause:  initializer_clause
    |                       advance_search '+' looped_initializer_clause                { $$ = $3; }
    |                       advance_search '-'                                          { $$ = 0; }

colon_mark:                 ':'                                                         { $$ = mark(); }

elaborated_class_specifier: class_key scoped_id                    %prec SHIFT_THERE    { $$ = YACC_ELABORATED_TYPE_SPECIFIER($1, $2); }
    |                       class_key scoped_id colon_mark error                        { $$ = YACC_ELABORATED_TYPE_SPECIFIER($1, $2); rewind_colon($3, $$); }

class_specifier_head:       class_key scoped_id colon_mark base_specifier_list '{'      { unmark($4); $$ = YACC_CLASS_SPECIFIER_ID($1, $2, $4); }
    |                       class_key ':' base_specifier_list '{'                       { $$ = YACC_CLASS_SPECIFIER_ID($1, 0, $3); }
    |                       class_key scoped_id '{'                                     { $$ = YACC_CLASS_SPECIFIER_ID($1, $2, 0); }
    |                       class_key '{'                                               { $$ = YACC_CLASS_SPECIFIER_ID($1, 0, 0); }

class_key:                  CLASS | STRUCT | UNION

class_specifier:            class_specifier_head member_specification.opt '}'           { $$ = YACC_CLASS_MEMBERS($1, $2); }
    |                       class_specifier_head member_specification.opt util looping_member_declaration '#' bang error '}'
                                            { $$ = YACC_CLASS_MEMBERS($1, $2); YACC_UNBANG($6, "Bad member_specification.opt."); }
member_specification.opt:   /* empty */                                                 { $$ = YACC_MEMBER_DECLARATIONS(0, 0); }
    |                       member_specification.opt util looping_member_declaration    { $$ = YACC_MEMBER_DECLARATIONS($1, YACC_COMPILE_DECLARATION($2, $3)); }
    |                       member_specification.opt util looping_member_declaration '#' bang error ';'
                                                                                                { $$ = $1; YACC_UNBANG($5, "Bad member-declaration."); }
looping_member_declaration: start_search looped_member_declaration                      { $$ = YACC_LINED_DECLARATION($2, $1); end_search($$); }

looped_member_declaration:  member_declaration
    |                       advance_search '+' looped_member_declaration                { $$ = $3; }
    |                       advance_search '-'                                          { $$ = 0; }

member_declaration:         accessibility_specifier
    |                       simple_member_declaration                                   { $$ = YACC_SIMPLE_DECLARATION($1); }
    |                       function_definition                                         { $$ = YACC_SIMPLE_DECLARATION($1); }
    |                       using_declaration
    |                       template_declaration

simple_member_declaration:  ';'                                                         { $$ = YACC_EXPRESSION(0); }
    |                       assignment_expression ';'
    |                       constructor_head ';'                                        { $$ = $1; }
    |                       member_init_declarations ';'                                { $$ = $1; }
    |                       decl_specifier_prefix simple_member_declaration             { $$ = YACC_DECL_SPECIFIER_EXPRESSION($2, $1); }

member_init_declarations:   assignment_expression ',' member_init_declaration           { $$ = YACC_EXPRESSIONS(YACC_EXPRESSIONS(0, $1), $3); }
    |                       constructor_head ',' bit_field_init_declaration             { $$ = YACC_EXPRESSIONS($1, $3); }
    |                       member_init_declarations ',' member_init_declaration        { $$ = YACC_EXPRESSIONS($1, $3); }

member_init_declaration:    assignment_expression
    |                       bit_field_init_declaration

accessibility_specifier:    access_specifier ':'                                        { $$ = YACC_ACCESSIBILITY_SPECIFIER($1); }

bit_field_declaration:      assignment_expression ':' bit_field_width                   { $$ = YACC_BIT_FIELD_EXPRESSION($1, $3); }
    |                       ':' bit_field_width                                         { $$ = YACC_BIT_FIELD_EXPRESSION(0, $2); }

bit_field_width:            logical_or_expression
    |                       logical_or_expression '?' bit_field_width ':' bit_field_width { $$ = YACC_CONDITIONAL_EXPRESSION($1, $3, $5); }

bit_field_init_declaration: bit_field_declaration
    |                       bit_field_declaration '=' initializer_clause                { $$ = YACC_ASSIGNMENT_EXPRESSION($1, $2, $3); }

base_specifier_list:        base_specifier                                              { $$ = YACC_BASE_SPECIFIERS(0, $1); }
    |                       base_specifier_list ',' base_specifier                      { $$ = YACC_BASE_SPECIFIERS($1, $3); }

base_specifier:             scoped_id                                                   { $$ = YACC_BASE_SPECIFIER($1); }
    |                       access_specifier base_specifier                             { $$ = YACC_ACCESS_BASE_SPECIFIER($2, $1); }
    |                       VIRTUAL base_specifier                                      { $$ = YACC_VIRTUAL_BASE_SPECIFIER($2); }

access_specifier:           PRIVATE | PROTECTED | PUBLIC

conversion_function_id:     OPERATOR conversion_type_id                                 { $$ = YACC_CONVERSION_FUNCTION_ID($2); }
conversion_type_id:         type_specifier ptr_operator_seq.opt                         { $$ = YACC_TYPED_EXPRESSION($1, $2); }
    |                       type_specifier conversion_type_id                           { $$ = YACC_TYPED_EXPRESSION($1, $2); }

ctor_initializer.opt:       /* empty */                                                 { $$ = YACC_MEM_INITIALIZERS(0, 0); }
    |                       ctor_initializer

ctor_initializer:           ':' mem_initializer_list                                    { $$ = $2; }
    |                       ':' mem_initializer_list bang error                         { $$ = $2; YACC_UNBANG($3, "Bad ctor-initializer."); }

mem_initializer_list:       mem_initializer                                             { $$ = YACC_MEM_INITIALIZERS(0, $1); }
    |                       mem_initializer_list_head mem_initializer                   { $$ = YACC_MEM_INITIALIZERS($1, $2); }

mem_initializer_list_head:  mem_initializer_list ','
    |                       mem_initializer_list bang error ','                         { YACC_UNBANG($2, "Bad mem-initializer."); }

mem_initializer:            mem_initializer_id '(' expression_list.opt ')'              { $$ = YACC_MEM_INITIALIZER($1, $3); }

mem_initializer_id:         scoped_id

operator_function_id:       OPERATOR operator                                           { $$ = YACC_OPERATOR_FUNCTION_ID($2); }

operator:             /*++++*/      NEW                                                         { $$ = YACC_OPERATOR_NEW_ID(); }
    |                 /*++++*/      DELETE                                                      { $$ = YACC_OPERATOR_DELETE_ID(); }
    |                               '+'                                                         { $$ = YACC_OPERATOR_ADD_ID(); }
    |                               '-'                                                         { $$ = YACC_OPERATOR_SUB_ID(); }
    |                               '*'                                                         { $$ = YACC_OPERATOR_MUL_ID(); }
    |                               '/'                                                         { $$ = YACC_OPERATOR_DIV_ID(); }
    |                               '%'                                                         { $$ = YACC_OPERATOR_MOD_ID(); }
    |                               '^'                                                         { $$ = YACC_OPERATOR_XOR_ID(); }
    |                               '&'                                                         { $$ = YACC_OPERATOR_BIT_AND_ID(); }
    |                               '|'                                                         { $$ = YACC_OPERATOR_BIT_OR_ID(); }
    |                               '~'                                                         { $$ = YACC_OPERATOR_BIT_NOT_ID(); }
    |                               '!'                                                         { $$ = YACC_OPERATOR_LOG_NOT_ID(); }
    |                               '='                                                         { $$ = YACC_OPERATOR_ASS_ID(); }
    |                               '<'                                                         { $$ = YACC_OPERATOR_LT_ID(); }
    |                               '>'                                                         { $$ = YACC_OPERATOR_GT_ID(); }
    |                               ASS_ADD                                                     { $$ = YACC_OPERATOR_ASS_ADD_ID(); }
    |                               ASS_SUB                                                     { $$ = YACC_OPERATOR_ASS_SUB_ID(); }
    |                               ASS_MUL                                                     { $$ = YACC_OPERATOR_ASS_MUL_ID(); }
    |                               ASS_DIV                                                     { $$ = YACC_OPERATOR_ASS_DIV_ID(); }
    |                               ASS_MOD                                                     { $$ = YACC_OPERATOR_ASS_MOD_ID(); }
    |                               ASS_XOR                                                     { $$ = YACC_OPERATOR_ASS_XOR_ID(); }
    |                               ASS_AND                                                     { $$ = YACC_OPERATOR_ASS_BIT_AND_ID(); }
    |                               ASS_OR                                                      { $$ = YACC_OPERATOR_ASS_BIT_OR_ID(); }
    |                               SHL                                                         { $$ = YACC_OPERATOR_SHL_ID(); }
    |                               SHR                                                         { $$ = YACC_OPERATOR_SHR_ID(); }
    |                               ASS_SHR                                                     { $$ = YACC_OPERATOR_ASS_SHR_ID(); }
    |                               ASS_SHL                                                     { $$ = YACC_OPERATOR_ASS_SHL_ID(); }
    |                               EQ                                                          { $$ = YACC_OPERATOR_EQ_ID(); }
    |                               NE                                                          { $$ = YACC_OPERATOR_NE_ID(); }
    |                               LE                                                          { $$ = YACC_OPERATOR_LE_ID(); }
    |                               GE                                                          { $$ = YACC_OPERATOR_GE_ID(); }
    |                               LOG_AND                                                     { $$ = YACC_OPERATOR_LOG_AND_ID(); }
    |                               LOG_OR                                                      { $$ = YACC_OPERATOR_LOG_OR_ID(); }
    |                               INC                                                         { $$ = YACC_OPERATOR_INC_ID(); }
    |                               DEC                                                         { $$ = YACC_OPERATOR_DEC_ID(); }
    |                               ','                                                         { $$ = YACC_OPERATOR_COMMA_ID(); }
    |                               ARROW_STAR                                                  { $$ = YACC_OPERATOR_ARROW_STAR_ID(); }
    |                               ARROW                                                       { $$ = YACC_OPERATOR_ARROW_ID(); }
    |                               '(' ')'                                                     { $$ = YACC_OPERATOR_CALL_ID(); }
    |                               '[' ']'                                                     { $$ = YACC_OPERATOR_INDEX_ID(); }

template_declaration:               template_parameter_clause declaration                       { $$ = YACC_TEMPLATE_DECLARATION($1, $2); }
    |                               EXPORT template_declaration                                 { $$ = YACC_DECL_SPECIFIER_DECLARATION($2, $1); }

template_parameter_clause:          TEMPLATE '<' template_parameter_list '>'                    { $$ = $3; }

template_parameter_list:            template_parameter                                          { $$ = YACC_TEMPLATE_PARAMETERS(0, $1); }
    |                               template_parameter_list ',' template_parameter              { $$ = YACC_TEMPLATE_PARAMETERS($1, $3); }

template_parameter:                 simple_type_parameter                                       { $$ = YACC_INIT_SIMPLE_TYPE_PARAMETER($1, 0); }
    |                               simple_type_parameter '=' type_id                           { $$ = YACC_INIT_SIMPLE_TYPE_PARAMETER($1, $3); }
    |                               templated_type_parameter                                    { $$ = YACC_INIT_TEMPLATED_PARAMETER($1, 0); }
    |                               templated_type_parameter '=' identifier                     { $$ = YACC_INIT_TEMPLATED_PARAMETER($1, $3); }
    |                               templated_parameter_declaration                             { $$ = YACC_TEMPLATE_PARAMETER($1); }
    |                               bang error                                                  { $$ = 0; YACC_UNBANG($1, "Bad template-parameter."); }

simple_type_parameter:              CLASS                                                       { $$ = YACC_CLASS_TYPE_PARAMETER(0); }
    |                               TYPENAME                                                    { $$ = YACC_TYPENAME_TYPE_PARAMETER(0); }

templated_type_parameter:           template_parameter_clause CLASS                             { $$ = YACC_TEMPLATED_TYPE_PARAMETER($1, 0); }
    |                               template_parameter_clause CLASS identifier                  { $$ = YACC_TEMPLATED_TYPE_PARAMETER($1, $3); }

template_id:                        TEMPLATE identifier '<' template_argument_list '>'          { $$ = YACC_TEMPLATE_NAME($2, $4); }
    |                               TEMPLATE template_id                                        { $$ = $2; }

template_argument_list:             template_argument                                           { $$ = YACC_TEMPLATE_ARGUMENTS(0, $1); }
    |                               template_argument_list ',' template_argument                { $$ = YACC_TEMPLATE_ARGUMENTS($1, $3); }

template_argument:                  templated_parameter_declaration                             { $$ = YACC_TEMPLATE_ARGUMENT($1); }

explicit_specialization:            TEMPLATE '<' '>' declaration                                { $$ = YACC_EXPLICIT_SPECIALIZATION($4); }

try_block:                          TRY compound_statement handler_seq                          { $$ = YACC_TRY_BLOCK($2, $3); }

handler_seq:                        handler                                                     { $$ = YACC_HANDLERS(0, $1); }
    |                               handler handler_seq                                         { $$ = YACC_HANDLERS($2, $1); }

handler:                            CATCH '(' exception_declaration ')' compound_statement      { $$ = YACC_HANDLER($3, $5); }

exception_declaration:              parameter_declaration                                       { $$ = YACC_EXCEPTION_DECLARATION($1); }

throw_expression:                   THROW                                                       { $$ = YACC_THROW_EXPRESSION(0); }
    |                               THROW assignment_expression                                 { $$ = YACC_THROW_EXPRESSION($2); }

templated_throw_expression:         THROW                                                       { $$ = YACC_THROW_EXPRESSION(0); }
    |                               THROW templated_assignment_expression                       { $$ = YACC_THROW_EXPRESSION($2); }

exception_specification:            THROW '(' ')'                                               { $$ = YACC_EXCEPTION_SPECIFICATION(0); }
    |                               THROW '(' type_id_list ')'                                  { $$ = YACC_EXCEPTION_SPECIFICATION($3); }

type_id_list:                       type_id                                                     { $$ = YACC_EXPRESSIONS(0, $1); }
    |                               type_id_list ',' type_id                                    { $$ = YACC_EXPRESSIONS($1, $3); }

advance_search ::= error {: yyerrok(); advance_search(); :};

bang ::= /* empty */ {: RESULT = YACC_BANG(); :};

mark ::= /* empty */ {: RESULT = mark(); :};

nest ::= /* empty */ {: RESULT = nest(); :};

start_search ::= /* empty */ {: RESULT = YACC_LINE(); start_search(false); :};

start_search1 ::= /* empty */ {: RESULT = YACC_LINE(); start_search(true); :};

util ::= /* empty */ {: RESULT = YACC_UTILITY_MODE(); :};
